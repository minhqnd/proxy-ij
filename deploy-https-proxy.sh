#!/bin/bash
# deploy-https-proxy.sh - Deploy HTTPS intercepting proxy to EC2

echo "üöÄ Deploy HTTPS Intercepting Proxy to EC2"
echo "=========================================="

# Configuration - Thay ƒë·ªïi theo setup c·ªßa b·∫°n
EC2_USER="ubuntu"
EC2_HOST=""  # S·∫Ω ƒë∆∞·ª£c h·ªèi n·∫øu tr·ªëng
KEY_FILE=""  # S·∫Ω ƒë∆∞·ª£c h·ªèi n·∫øu tr·ªëng

# H·ªèi th√¥ng tin EC2 n·∫øu ch∆∞a c√≥
if [ -z "$EC2_HOST" ]; then
    echo "üîß C·∫•u h√¨nh EC2:"
    read -p "Nh·∫≠p EC2 IP ho·∫∑c domain (host.minhqnd.com): " EC2_HOST
fi

if [ -z "$KEY_FILE" ]; then
    read -p "Nh·∫≠p ƒë∆∞·ªùng d·∫´n t·ªõi SSH key (.pem file): " KEY_FILE
fi

if [ ! -f "$KEY_FILE" ]; then
    echo "‚ùå SSH key kh√¥ng t·ªìn t·∫°i: $KEY_FILE"
    exit 1
fi

echo "üì° Connecting to: $EC2_USER@$EC2_HOST"

# 1. Upload files
echo ""
echo "üì§ Uploading files to EC2..."

FILES_TO_UPLOAD=(
    "https-intercepting-proxy.js"
    "setup-https-interception.sh"
    "package.json"
)

for file in "${FILES_TO_UPLOAD[@]}"; do
    if [ -f "$file" ]; then
        echo "   Uploading $file..."
        scp -i "$KEY_FILE" "$file" "$EC2_USER@$EC2_HOST:~/"
    else
        echo "   ‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i: $file"
    fi
done

# 2. Deploy tr√™n EC2
echo ""
echo "üîß Setting up HTTPS intercepting proxy on EC2..."

ssh -i "$KEY_FILE" "$EC2_USER@$EC2_HOST" << 'REMOTE_SCRIPT'
echo "üîç Ki·ªÉm tra m√¥i tr∆∞·ªùng EC2..."

# Ki·ªÉm tra Node.js
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!"
    echo "üì¶ C√†i ƒë·∫∑t Node.js..."
    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
    sudo apt-get install -y nodejs
fi

# Ki·ªÉm tra PM2
if ! command -v pm2 &> /dev/null; then
    echo "üì¶ C√†i ƒë·∫∑t PM2..."
    sudo npm install -g pm2
fi

# Ki·ªÉm tra OpenSSL
if ! command -v openssl &> /dev/null; then
    echo "üì¶ C√†i ƒë·∫∑t OpenSSL..."
    sudo apt-get update
    sudo apt-get install -y openssl
fi

# C√†i ƒë·∫∑t dependencies n·∫øu c·∫ßn
if [ -f "package.json" ]; then
    echo "üì¶ C√†i ƒë·∫∑t npm dependencies..."
    npm install
fi

# Ch·∫°y setup script
if [ -f "setup-https-interception.sh" ]; then
    echo "üîí Ch·∫°y HTTPS interception setup..."
    chmod +x setup-https-interception.sh
    ./setup-https-interception.sh
else
    echo "‚ùå setup-https-interception.sh kh√¥ng t·ªìn t·∫°i!"
    
    # Fallback: ch·∫°y manual
    echo "üîÑ Manual setup..."
    pm2 stop all 2>/dev/null || true
    pm2 start https-intercepting-proxy.js --name "https-proxy" --env production
fi

echo ""
echo "üìä PM2 Status:"
pm2 status

echo ""
echo "üìù Recent logs:"
pm2 logs https-proxy --lines 5

echo ""
echo "üß™ Test proxy health:"
curl -s http://localhost:8080/proxy-health | head -3

REMOTE_SCRIPT

# 3. Final verification
echo ""
echo "‚úÖ Deployment completed!"
echo ""
echo "üîí HTTPS Intercepting Proxy Info:"
echo "   URL: http://$EC2_HOST:8080"
echo "   Health: http://$EC2_HOST:8080/proxy-health"
echo ""
echo "üîß Browser Configuration:"
echo "   HTTP Proxy: $EC2_HOST:8080"
echo "   HTTPS Proxy: $EC2_HOST:8080"
echo ""
echo "üß™ Test URLs:"
echo "   https://example.com (s·∫Ω c√≥ certificate warning + injection)"
echo "   http://example.com (s·∫Ω c√≥ injection)"
echo ""
echo "‚ö†Ô∏è  Certificate Warnings:"
echo "   - Browser s·∫Ω hi·ªán security warnings cho HTTPS"
echo "   - Click 'Advanced' ‚Üí 'Proceed to site' ƒë·ªÉ test"
echo "   - ƒêi·ªÅu n√†y l√† b√¨nh th∆∞·ªùng khi intercept HTTPS"
echo ""
echo "üìã Check status:"
echo "   ssh -i $KEY_FILE $EC2_USER@$EC2_HOST"
echo "   pm2 logs https-proxy"
echo "   pm2 status"